/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "REPTestOS_menus_menu.h"

// Global variable declarations

LiquidCrystal lcd(0, 1, 2, 4, 5, 6, 7);
LiquidCrystalRenderer renderer(lcd, 20, 4);

// Global Menu Item declarations

const PROGMEM AnyMenuInfo minfoTestSettingsSaveTestSettings = { "Save Test Settings", 12, 0xffff, 0, saveTestSettings };
ActionMenuItem menuTestSettingsSaveTestSettings(&minfoTestSettingsSaveTestSettings, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnTestSettingsMaxCyclesRtCall, largeNumItemRenderFn, "Max Cycles", 25, maxCycles)
EditableLargeNumberMenuItem menuTestSettingsMaxCycles(fnTestSettingsMaxCyclesRtCall, 11, 6, 0, false, &menuTestSettingsSaveTestSettings);
RENDERING_CALLBACK_NAME_INVOKE(fnTestSettingsMaxRunTimeRtCall, timeItemRenderFn, "Max Run Time", 17, maxRunTime)
TimeFormattedMenuItem menuTestSettingsMaxRunTime(fnTestSettingsMaxRunTimeRtCall, 9, (MultiEditWireType)2, &menuTestSettingsMaxCycles);
const PROGMEM AnalogMenuInfo minfoTestSettingsCyclesPerSecond = { "Cycles Per Second", 6, 6, 10, cycleFrequency, 0, 1, "" };
AnalogMenuItem menuTestSettingsCyclesPerSecond(&minfoTestSettingsCyclesPerSecond, 0, &menuTestSettingsMaxRunTime);
const PROGMEM BooleanMenuInfo minfoTestSettingsPull = { "Pull", 4, 5, 1, pullControl, NAMING_TRUE_FALSE };
BooleanMenuItem menuTestSettingsPull(&minfoTestSettingsPull, false, &menuTestSettingsCyclesPerSecond);
const PROGMEM BooleanMenuInfo minfoTestSettingsPush = { "Push", 3, 4, 1, pushControl, NAMING_TRUE_FALSE };
BooleanMenuItem menuTestSettingsPush(&minfoTestSettingsPush, false, &menuTestSettingsPull);
RENDERING_CALLBACK_NAME_INVOKE(fnTestSettingsRtCall, backSubItemRenderFn, "Test Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoTestSettings = { "Test Settings", 2, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackTestSettings(fnTestSettingsRtCall, &menuTestSettingsPush);
SubMenuItem menuTestSettings(&minfoTestSettings, &menuBackTestSettings, NULL);
const PROGMEM AnyMenuInfo minfoStopTest = { "Stop Test", 10, 0xffff, 0, stopTest };
ActionMenuItem menuStopTest(&minfoStopTest, &menuTestSettings);
const PROGMEM AnyMenuInfo minfoStartTest = { "Start Test", 1, 0xffff, 0, startTest };
ActionMenuItem menuStartTest(&minfoStartTest, &menuStopTest);
RENDERING_CALLBACK_NAME_INVOKE(fnRunTimeRtCall, timeItemRenderFn, "Run Time", 21, NO_CALLBACK)
TimeFormattedMenuItem menuRunTime(fnRunTimeRtCall, 8, (MultiEditWireType)2, &menuStartTest);
RENDERING_CALLBACK_NAME_INVOKE(fnTotalCyclesRtCall, textItemRenderFn, "Total Cycles", 33, NO_CALLBACK)
TextMenuItem menuTotalCycles(fnTotalCyclesRtCall, 7, 9, &menuRunTime);
const PROGMEM ConnectorLocalInfo applicationInfo = { "REP Test OS V1", "e2546280-7452-4879-8faa-2c4fe5c2809f" };

// Set up code

void setupMenu() {
    Wire.begin();
    lcd.setIoAbstraction(ioFrom8574(0x27, 0xff, &Wire));
    lcd.begin(20, 4);
    lcd.configureBacklightPin(3);
    lcd.backlight();
    switches.initialise(internalDigitalIo(), true);
    menuMgr.initForEncoder(&renderer, &menuTotalCycles, 2, 3, 8);

    // Read only and local only function calls
    menuTotalCycles.setReadOnly(true);
}

